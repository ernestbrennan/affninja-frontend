var MOBILE_DEVICE_ID = 2;
var TABLET_DEVICE_ID = 3;

var StatusDatatable = Datatable.getInstance();
var PostbackDatatable = Datatable.getInstance();

Vue.component('by-leads', {
    template: '#stat_by_leads_tpl',
    mixins: [lead_statistics_mixin],
    data() {
        return {
            leads: [],
            status_logs: [],
            postbackin_logs: [],
            lead_status_modal: [],
            target_geo_rules: [],
            CDN_HOST: CDN_HOST,
            params: {},
            total: {},
            currency_sign: null,
            table_identifier: null,
            datatable: null,
            active_lead: null,
            target_geo_rules_modal: null,
            leads_loading: false,
            ladda: null,
            sort_by: 'created_at',
            sorting: 'desc',
            filters: [
                'date_from', 'date_to', 'publisher_hashes', 'advertiser_hashes', 'offer_hashes', 'landing_hashes',
                'transit_hashes', 'is_autogenerated', 'search_field', 'search', 'target_geo_country_ids', 'country_ids',
                'currency_ids', 'lead_statuses', 'processed_date_from', 'processed_date_to'
            ],
            currencies_info: [
                {title: 'rub_', currency_id: CURRENCY_RUB_ID},
                {title: 'usd_', currency_id: CURRENCY_USD_ID},
                {title: 'eur_', currency_id: CURRENCY_EUR_ID},
            ],
        };
    },

    mounted() {
        this.target_geo_rules_modal = $('#target_geo_rules_modal');
        this.lead_status_modal = $('#lead_status_modal');

        this.lead_status_modal.on('hidden.bs.modal', () => {
            this.status_logs.splice(0);
            this.postbackin_logs.splice(0);
        })
    },

    computed: {
        approve: function () {
            return Stat.calculateApprove(this.approved_count, this.cancelled_count, this.held_count, this.trashed_count);
        }
    },

    watch: {
        'leads'() {
            if (!this.leads.length) {
                return;
            }
            Vue.nextTick(() => {
                this.$refs.datatable.init(
                    'stat_by_lead',
                    this.sort_by,
                    this.sorting
                );
                runTooltip();
                runPopover();
                runCustomTooltip();
            });
        },

        'status_logs'() {
            this.$nextTick(() => {
                // @todo Run me
                //this.runDatatableOnStatus();
            });
        },

        'postbackin_logs'() {
            this.$nextTick(() => {
                // @todo Run me
                // this.runDatatableOnLogs();
            });
        },
        'leads_loading'() {
            if (this.leads_loading) {
                StatParameter.leads_loading = true;

                filters_bus.$emit('apply-filter-start');

                if (this.leads.length > 0) {
                    ContentPreloader.show('#scroll-preloader-container');
                } else {
                    ContentPreloader.show('#leads_table_wrap');
                }
            } else {
                StatParameter.leads_loading = false;
                filters_bus.$emit('apply-filter-stop');
                ContentPreloader.hide();
            }
        },
    },

    methods: {
        strtotime(date) {
            return strtotime(date);
        },

        buildUrlParams(object) {
            return http_build_query(object);
        },

        runDatatableOnStatus() {
            let config = {
                columnDefs: [
                    {targets: 0, type: 'title-numeric-desc'},
                    {targets: 1, orderable: false},
                    {targets: 2, orderable: false},
                    {targets: 3, orderable: false},
                    {targets: 4, orderable: false},
                ],
                aaSorting: [[0, "desc"]],
            };

            StatusDatatable.init('status-list-table', config, false);
        },

        runDatatableOnLogs() {
            let config = {
                columnDefs: [
                    {targets: 0, type: 'title-numeric-desc'},
                    {targets: 1, orderable: false},
                    {targets: 2, orderable: false},
                ],
                aaSorting: [[0, "desc"]],
            };

            PostbackDatatable.init('postback-list-table', config, false);
        },

        clearLeads() {
            this.leads.splice(0);
        },

        openLeadClickParameterModal(lead) {
            this.$refs['lead-click-parameter-modal'].openModal(lead);
        },

        openTargetGeoRulesModal(lead) {
            AjaxPreloader.show();

            this.active_lead = lead;
            let params = {
                target_geo_id: lead.target_geo_id,
                with: ['integration', 'advertiser'],
            };

            api.get('/target_geo_rule.getList', {params: params}).then(response => {
                this.target_geo_rules = response.data.response;

                AjaxPreloader.hide();
                this.target_geo_rules_modal.modal();
            });
        },

        openLeadStatusInfoModal(lead_hash) {
            this.lead_status_modal.modal();
            ContentPreloader.show('#tab-content-status-wrap');

            let params = {
                hash: lead_hash,
                with: ['status_log.integration', 'postbackin_logs', 'status_log'],
            };

            api.get('/lead.getByHash', {params: params}).then(response => {
                this.status_logs = response.data.response.status_log;
                this.postbackin_logs = response.data.response.postbackin_logs;

                ContentPreloader.hide();
            }, () => {
                ContentPreloader.hide();
            });
        },

        integrateLead(target_geo_rule_id) {
            Swal.show(LANG_STATISTICS.integrate_confirmation, LANG_STATISTICS.integrate).then(() => {
                let params = {
                    lead_id: this.active_lead.id,
                    target_geo_rule_id: target_geo_rule_id
                };
                let ladda = LaddaPreloader.start('#integrate_lead-' + target_geo_rule_id);

                api.post('/lead.integrate', params).then(response => {
                    this.target_geo_rules_modal.modal('hide');
                    showMessage('success', response.data.message);
                    LaddaPreloader.stop(ladda);
                }, () => {
                    LaddaPreloader.stop(ladda);
                });
            });
        },

        setLeadStatus(status) {
            let statuses = [];
            if (status !== 'all') {
                statuses = [status];
            }

            filters_bus.$emit('lead_statuses-refresh', statuses, true);
        },

        refreshLeads() {
            this.clearLeads();
            this.getStatByLead();
        },

        getStatByLead() {
            this.params = this.$parent.getFiltersData(this.filters);
            this.params.page = StatParameter.page;
            this.params.per_page = 40;

            this.params.sort_by = this.sort_by;
            this.params.sorting = this.sorting;

            if (!this.params.is_autogenerated) {
                delete this.params.is_autogenerated;
            }

            (UrlParameter.getLeadHour() !== 'null' ? this.params.hour = UrlParameter.getLeadHour() : '');
            (UrlParameter.getLeadRegion_id() !== 'null' ? this.params.region_id = UrlParameter.getLeadRegion_id() : '');
            (UrlParameter.getLeadCity_id() !== 'null' ? this.params.city_id = UrlParameter.getLeadCity_id() : '');
            (UrlParameter.getFlowHashes() !== 'null' ? this.params.flow_hashes = UrlParameter.getFlowHashes() : '');

            this.leads_loading = true;

            api.get('/stat.getByLead', {params: this.params}).then(response => {

                if (StatParameter.page === 1) {
                    _.assign(this.total, response.data.response.total);
                }

                StatParameter.all_loaded = response.data.response.all_loaded;
                this.leads = this.leads.concat(response.data.response.data);

                this.leads_loading = false;
            }, () => {
                this.leads_loading = false;
            });
        },

        changeStatus(lead, status, lead_index) {
            let params = {hashes: [lead.hash], action: status, sub_status_id: 0};

            api.post('/lead.bulkEdit', params).then(response => {
                showMessage('success', response.data.message);

                this.leads.splice(lead_index, 1, response.data.response[0])
            });
        },

        getStatusLog(lead) {
            let status_log_title = '', inegration_title, translated_status;

            for (log_item of lead.status_log) {
                translated_status = LANG_STATISTICS['lead_' + log_item.status + '_status'];

                inegration_title = '';
                if (_.get(log_item.integration, 'title', false)) {
                    inegration_title = log_item.integration.title;
                }

                status_log_title += "<div class='m-b-xs'>"
                    + date('d.m H:i', strtotime(log_item.created_at))
                    + " <b>" + inegration_title + ' ' + translated_status + "</b>"
                    + ' ' + getSubstatusTranslation(log_item.sub_status_id);
            }

            return status_log_title;
        },

        getIntegrationTitle(lead) {
            if (!is_null(lead.integration)) {
                return lead.integration.title;
            }

            return '';
        },

        getAdditionalSalesCount(products_array) {
            if (is_null(products_array)) {
                return false;
            }

            let sum = 0;

            for (key in products_array) {
                sum += +products_array[key];
            }

            return sum <= 1 ? false : sum - 1;
        },

        getOriginLeadUrl(lead) {
            if (is_null(lead.origin_lead_hash)) {
                throw 'Сгенерировать ссылку невозможно';
            }

            return '/leads?'
                + http_build_query({
                    date_from: this.params.date_from,
                    date_to: this.params.date_to,
                    search_field: 'hash',
                    search: lead.origin_lead_hash,
                });
        },

        onDatatableChangeSort(params) {
            this.sort_by = params.sort_by;
            this.sorting = params.sorting;

            this.$root.getStat();
        }
    }
});

$(document).ready(function () {

    addEventForHidePopoverClickOutside();

    $(document).on('click', '.open_order_info_modal', function () {
        openOrderInfoModal($(this).data('order_id'), $(this).data('lead_type'))
    });

    $(document).on('click', '.open_lead_reminder_visits_modal', function () {
        openLeadReminderVisitsModal($(this).data('lead_id'))
    });

    $(document).on('hidden.bs.modal', '#order_info_modal, #lead_reminder_visits_modal', function () {
        $(this).modal('hide').remove();
    });

    // Открытие нового окна с отправленным email напоминания о неоплаченном лиде
    $(document).on('click', '.show_lead_reminder_sended_email', function () {
        let lead_id = $(this).data('lead_id');

        window.open(API_HOST + '/email_log.show?' + http_build_query({
            entity_id: lead_id,
            entity_type: 'lead',
        }))
    });
});

function openLeadReminderVisitsModal(lead_id) {
    showAjaxPreloader();

    apiRequest('stat.getLeadReminderVisits', 'GET', {lead_id: lead_id}, function (response) {

        var template_data = {
            LANG_STATISTICS: LANG_STATISTICS,
            LANG_MESSAGES: LANG_MESSAGES,
            CDN_HOST: CDN_HOST,
            lead_id: lead_id,
            visits: response.response
        };

        renderTemplate('/admin/statistics/templates/lead_reminder_visits_modal.hbs', template_data, 'body', {},
            function () {
                hideAjaxPreloader();
                $('#lead_reminder_visits_modal').modal();
            }, 'append');
    }, null);
}

/**
 * Открытие модалки с параметрами заказа
 *
 * @param order_id
 * @param lead_type
 */
function openOrderInfoModal(order_id, lead_type) {
    showAjaxPreloader();

    apiRequest('stat.getOrderInfo', 'GET', {id: order_id}, function (response) {

        var template_data = {
                LANG_STATISTICS: LANG_STATISTICS,
                LANG_MESSAGES: LANG_MESSAGES,
                order_info: response.response,
                products_hashes: ''
            },
            template_name;

        switch (lead_type) {
            case 'cod':
                template_name = 'cod_order_info_modal.hbs';
                break;

            case 'online':
                template_name = 'online_order_info_modal.hbs';
                template_data.order_info.info = JSON.parse(template_data.order_info.info);
                break;

            default:
                throw 'Unknown lead type';
        }

        if (template_data.order_info.is_corrected) {
            template_data.order_info.history = _.reverse(JSON.parse(template_data.order_info.history));
        }

        if (template_data.order_info.products !== '{}') {
            var products = JSON.parse(template_data.order_info.products);
            template_data.products_hashes = _.keys(products);
            template_data.products_hashes = _.join(template_data.products_hashes);
        }

        renderTemplate('/admin/statistics/templates/' + template_name, template_data, 'body', {},
            function () {
                hideAjaxPreloader();
                // runTooltip();
                // runPopover();
                $('#order_info_modal').modal();
            }, 'append');
    }, null);
}

function isMobileOrTablet(device_type_id) {
    return device_type_id === MOBILE_DEVICE_ID || device_type_id === TABLET_DEVICE_ID;
}